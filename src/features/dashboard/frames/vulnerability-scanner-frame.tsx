import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Shield,
  Search,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Brain,
  Globe,
  Lock,
  Activity,
} from "lucide-react";
import { useWorkspace } from "../hooks/use-workspace";
// import { ScanReports } from "./scan-reports"
// import { AIAnalysisPanel } from "./ai-analysis-panel"
// import type { Vulnerability } from "@/lib/database-service"

interface ScanResult {
  scanId: string;
  vulnerabilities: Vulnerability[];
  summary: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
}

interface VulnerabilityScannerProps {
  workspaceId: string;
}

export const VulnerabilityScannerFrame = ({
  workspaceId,
}: VulnerabilityScannerProps) => {
  const { workspace } = useWorkspace(workspaceId);
  const [targetUrl, setTargetUrl] = useState(
    workspace?.domain ? `https://${workspace.domain}` : ""
  );
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanStatus, setScanStatus] = useState("");
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanComplete, setScanComplete] = useState(false);
  const [currentScanId, setCurrentScanId] = useState<string | null>(null);

  const handleScan = async () => {
    if (!targetUrl) return;

    if (!workspaceId) {
      setScanStatus("Please select a workspace first");
      return;
    }

    setIsScanning(true);
    setScanProgress(0);
    setScanStatus("Initializing scan...");
    setVulnerabilities([]);
    setScanComplete(false);
    setCurrentScanId(null);

    try {
      setScanStatus("Starting vulnerability detection...");
      setScanProgress(10);

      await new Promise((resolve) => setTimeout(resolve, 100));
      setScanProgress(40);

      await new Promise((resolve) => setTimeout(resolve, 300));
      setScanProgress(75);
      await new Promise((resolve) => setTimeout(resolve, 200));
      setScanProgress(85);
      await new Promise((resolve) => setTimeout(resolve, 100));
      setScanProgress(95);

      const response = await fetch("/api/scan", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          targetUrl,
          scanType: "comprehensive",
          workspaceId, // Include workspace ID in scan request
        }),
      });

      if (!response.ok) {
        throw new Error("Scan request failed");
      }

      setScanStatus("Analyzing security vulnerabilities...");
      setScanProgress(50);

      const result: ScanResult = await response.json();

      setScanStatus("Processing results...");
      setScanProgress(80);

      setVulnerabilities(result.vulnerabilities);
      setCurrentScanId(result.scanId);
      setScanProgress(100);
      setScanStatus("Scan completed successfully");
      setScanComplete(true);
    } catch (error) {
      console.error("Scan failed:", error);
      setScanStatus("Scan failed. Please try again.");
    } finally {
      setIsScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-destructive text-destructive-foreground";
      case "high":
        return "bg-chart-2 text-white";
      case "medium":
        return "bg-chart-1 text-white";
      case "low":
        return "bg-chart-3 text-white";
      default:
        return "bg-muted text-muted-foreground";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <XCircle className="h-4 w-4" />;
      case "high":
        return <AlertTriangle className="h-4 w-4" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4" />;
      case "low":
        return <CheckCircle className="h-4 w-4" />;
      default:
        return <CheckCircle className="h-4 w-4" />;
    }
  };

  const criticalCount = vulnerabilities.filter(
    (v) => v.severity === "critical"
  ).length;
  const highCount = vulnerabilities.filter((v) => v.severity === "high").length;
  const mediumCount = vulnerabilities.filter(
    (v) => v.severity === "medium"
  ).length;
  const lowCount = vulnerabilities.filter((v) => v.severity === "low").length;

  return (
    <div className="space-y-6">
      {/* Tool Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Shield className="h-8 w-8 text-primary" />
          <div>
            <h1 className="text-3xl font-bold text-foreground">
              Vulnerability Scanner
            </h1>
            <p className="text-muted-foreground">
              AI-powered web security analysis and threat detection
            </p>
          </div>
        </div>
        {workspace?.name && (
          <div className="text-right">
            <p className="text-sm text-muted-foreground">
              Scanning for workspace:
            </p>
            <p className="font-semibold text-foreground">{workspace.name}</p>
            {workspace.domain && (
              <p className="text-sm text-muted-foreground">
                {workspace.domain}
              </p>
            )}
          </div>
        )}
      </div>

      {!workspaceId && (
        <Alert className="border-l-4 border-l-secondary bg-card border-border">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription className="text-card-foreground">
            Please select a workspace from the workspace selector above to start
            scanning.
          </AlertDescription>
        </Alert>
      )}

      {/* Scan Configuration */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-card-foreground">
            <Globe className="h-5 w-5" />
            Target Configuration
          </CardTitle>
          <CardDescription>
            {workspace?.domain
              ? `Scanning ${workspace?.domain} - you can modify the URL if needed`
              : "Enter the URL you want to scan for security vulnerabilities"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4">
            <Input
              placeholder="https://example.com"
              value={targetUrl}
              onChange={(e) => setTargetUrl(e.target.value)}
              className="flex-1 bg-input border-border text-foreground"
              disabled={isScanning || !workspaceId}
            />
            <Button
              onClick={handleScan}
              disabled={isScanning || !targetUrl || !workspaceId}
              className="px-8 bg-primary text-primary-foreground hover:bg-primary/90"
            >
              {isScanning ? (
                <>
                  <Activity className="h-4 w-4 mr-2 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Search className="h-4 w-4 mr-2" />
                  Start Scan
                </>
              )}
            </Button>
          </div>

          {isScanning && (
            <div className="mt-4 space-y-2">
              <div className="flex justify-between text-sm text-card-foreground">
                <span>{scanStatus}</span>
                <span>{Math.round(scanProgress)}%</span>
              </div>
              <Progress value={scanProgress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Results Dashboard */}
      {scanComplete && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card className="bg-card border-border">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    Critical
                  </p>
                  <p className="text-2xl font-bold text-destructive">
                    {criticalCount}
                  </p>
                </div>
                <XCircle className="h-8 w-8 text-destructive" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card border-border">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    High
                  </p>
                  <p className="text-2xl font-bold text-chart-2">{highCount}</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-chart-2" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card border-border">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    Medium
                  </p>
                  <p className="text-2xl font-bold text-chart-1">
                    {mediumCount}
                  </p>
                </div>
                <AlertTriangle className="h-8 w-8 text-chart-1" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card border-border">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    Low
                  </p>
                  <p className="text-2xl font-bold text-chart-3">{lowCount}</p>
                </div>
                <CheckCircle className="h-8 w-8 text-chart-3" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Detailed Results */}
      {scanComplete && vulnerabilities.length > 0 && (
        <Tabs defaultValue="vulnerabilities" className="w-full">
          <TabsList className="grid w-full grid-cols-2 bg-muted">
            <TabsTrigger
              value="vulnerabilities"
              className="data-[state=active]:bg-background"
            >
              Vulnerabilities
            </TabsTrigger>
            <TabsTrigger
              value="ai-analysis"
              className="data-[state=active]:bg-background"
            >
              AI Analysis
            </TabsTrigger>
          </TabsList>

          <TabsContent value="vulnerabilities" className="space-y-4">
            <Card className="bg-card border-border">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-card-foreground">
                  <Lock className="h-5 w-5" />
                  Detected Vulnerabilities
                </CardTitle>
                <CardDescription>
                  Security issues found during the scan
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {vulnerabilities.map((vuln) => (
                    <Alert
                      key={vuln.id}
                      className="border-l-4 border-l-destructive bg-card border-border"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3 flex-1">
                          {getSeverityIcon(vuln.severity)}
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <h4 className="font-semibold text-card-foreground">
                                {vuln.title}
                              </h4>
                              <Badge
                                className={getSeverityColor(vuln.severity)}
                              >
                                {vuln.severity.toUpperCase()}
                              </Badge>
                            </div>
                            <AlertDescription className="mb-2 text-card-foreground">
                              {vuln.description}
                            </AlertDescription>
                            <p className="text-sm text-muted-foreground font-mono mb-1">
                              {vuln.affected_url}
                            </p>
                            {vuln.evidence && (
                              <p className="text-xs text-muted-foreground">
                                Evidence: {vuln.evidence}
                              </p>
                            )}
                            {vuln.recommendation && (
                              <p className="text-xs text-accent mt-1">
                                Recommendation: {vuln.recommendation}
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                    </Alert>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="ai-analysis" className="space-y-4">
            <Card className="bg-card border-border">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-card-foreground">
                  <Brain className="h-5 w-5" />
                  AI-Powered Analysis
                </CardTitle>
                <CardDescription>
                  Intelligent insights and recommendations for each
                  vulnerability
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {vulnerabilities.map((vuln) => (
                    <AIAnalysisPanel key={vuln.id} vulnerability={vuln} />
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      )}

      {scanComplete && vulnerabilities.length > 0 && currentScanId && (
        <ScanReports
          currentScan={{
            id: currentScanId,
            targetUrl,
            vulnerabilities,
            scanDate: new Date(),
            workspaceId, // Pass workspace ID to reports
            workspaceName,
          }}
        />
      )}

      {/* Empty State */}
      {!scanComplete && !isScanning && workspaceId && (
        <Card className="text-center py-12 bg-card border-border">
          <CardContent>
            <Shield className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2 text-card-foreground">
              Ready to Scan
            </h3>
            <p className="text-muted-foreground">
              Enter a target URL above and click "Start Scan" to begin
              vulnerability analysis
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
